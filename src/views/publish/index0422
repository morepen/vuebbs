<template>
	<div class="upload">
    <div class="content">
        <div class="up-head">
            <i class="iconfont">&#xe616;</i>发布新图片
        </div>
        <div class="up-form">
            <div class="group clearfix">
                <p>图片标题</p>
                <textarea id="title" placeholder="投稿须知：敏感政治内容，黄暴内容的帖子，将会被直接删除。站长不想被请去喝茶 (┬＿┬)"></textarea>
                <p class="hint">一个描述性或有趣的标题会吸引更多的投票和分享还可以输入 100 字</p>
            </div>
            <div class="group clearfix">
                <p>上传图片</p>
                <form  id="form-img" action="/api/post/upload" method="post" target="iframe-img" enctype="multipart/form-data">
                    <input id="action" name="avatar" type="file" @change="onFileChange">
                    <iframe style="display: none;" id="iframe-img" name="iframe-img" ></iframe>
                    <i class="bn">+</i>
                    <span class="hint">支持的格式为: JPEG, PNG，GIF 大小限制: 3MB内。</span>
                </form>
                <img src="" alt="" class="show-img" onclick="inputFile()">
            </div>
            <div class="upload-bnt" v-on:click="upload()">上传</div>
        </div>

    </div>
    <div class="side">
        <h2>图片投稿</h2>
        <h3>1. 不准飚车,不准飚车,不准飚车</h3>
        <h3>2. 标题违规的帖子将会直接删除</h3>
        <h3>3. 拒绝有水印和非原创的帖子</h3>
        <h3>4. 上古时期的图就不要发了</h3>
        <h3>5. 禁止发布一些不可描述的东西</h3>
        <h3>6. 饺子韭菜馅的好吃</h3>
        <h3>7. 发表帖子即同意以上条款</h3>
    </div>

</div>
</template>

<style>
   @import '../../assets/css/page/upload.css';
</style>

<script>
	export default{
	 data () {
       return {
        imgList: [],
        size: 0
      }
    },
     methods: {
          fileClick() {
              alert(123);
          },
          fileChange(el) {
              if (!el.target.files[0].size) return;
              this.fileList(el.target);
              el.target.value = ''
          },
          fileList(fileList) {
              let files = fileList.files;
              for (let i = 0; i < files.length; i++) {
                  //判断是否为文件夹
                  if (files[i].type != '') {
                      this.fileAdd(files[i]);
                  } else {
                      //文件夹处理
                      this.folders(fileList.items[i]);
                  }
              }
          },
          //文件夹处理
          folders(files) {
              let _this = this;
              //判断是否为原生file
              if (files.kind) {
                  files = files.webkitGetAsEntry();
              }
              files.createReader().readEntries(function (file) {
                  for (let i = 0; i < file.length; i++) {
                      if (file[i].isFile) {
                          _this.foldersAdd(file[i]);
                      } else {
                          _this.folders(file[i]);
                      }
                  }
              })
          },
          foldersAdd(entry) {
              let _this = this;
              entry.file(function (file) {
                  _this.fileAdd(file)
              })
          },
          fileAdd(file) {
              //总大小
              this.size = this.size + file.size;
              //判断是否为图片文件
              if (file.type.indexOf('image') == -1) {
                  file.src = 'wenjian.png';
                  this.imgList.push({
                      file
                  });
              } else {
                  let reader = new FileReader();
                  reader.vue = this;
                  reader.readAsDataURL(file);
                  reader.onload = function () {
                      file.src = this.result;
                      this.vue.imgList.push({
                          file
                      });
                  }
              }
          },
          fileDel(index) {
              this.size = this.size - this.imgList[index].file.size;//总大小
              this.imgList.splice(index, 1);
          },
          bytesToSize(bytes) {
              if (bytes === 0) return '0 B';
              let k = 1000, // or 1024
                  sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
                  i = Math.floor(Math.log(bytes) / Math.log(k));
              return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
          },
          dragenter(el) {
              el.stopPropagation();
              el.preventDefault();
          },
          dragover(el) {
              el.stopPropagation();
              el.preventDefault();
          },
          drop(el) {
              el.stopPropagation();
              el.preventDefault();
              this.fileList(el.dataTransfer);
          }
      }
	}
</script>
